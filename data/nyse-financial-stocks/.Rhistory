# Reading the file
path <- file.path("C:\\Users\\Kavish\\Dropbox\\_Master of Data Science - UM\\WQD7004 - Programming for Data Science\\Group Assignment")
fundamentalPath <- file.path(path, "fundamentals.csv")
stockDf <- read.csv(fundamentalPath)
View(stockDf)
# Check how many rows belong to AAL
sum(stockDf$Ticker.Symbol=='AAL')
sum(stockDf$Ticker.Symbol=='APL')
files <- list.files(pattern = "*.csv")
setwd("C:/Users/Kavish/Dropbox/_Master of Data Science - UM/WQD7004 - Programming for Data Science/Group Assignment/git/rGroupProj/data/nyse-financial-stocks")
files <- list.files(pattern = "*.csv")
stockCol <- c("Date", "Stock", "Location", "High", "Low", "Open", "Close",
"Aggregated data 2 days", "Aggregated data 3 days", "Aggregated data 5 days",
"Volume", "Number of employees", "Net change 0-numeric", "Net change 0-nominal",
"Net change 5-numeric", "Net change 5-nominal", "Net change 25-numeric",
"Net change 25-nominal")
stockDf <- do.call(rbind, lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE,
header = TRUE, col.names = stockCol)))
# The column names for the imported company dataset
companyCol <- c('Stock', 'Company', 'SEC filings', 'GICS Sector', 'GICS Sub Industry', 'HQ Address',
'Date first added', 'CIK')
companyDetails <- read.csv('../securities.csv', stringsAsFactors = FALSE, col.names = companyCol)
library(lubridate)
library(dplyr)
stockDf$Date <- dmy(stockDf$Date)
# Fix the number incorrectly represented as characters
library(stringr)
stockDf$Number.of.employees <- str_replace(stockDf$Number.of.employees, pattern = ',', replacement = '')
stockDf$Number.of.employees <- as.numeric(stockDf$Number.of.employees)
# Fix the string that should be formatted as factors
stockDf$Net.change.0.nominal <- as.factor(stockDf$Net.change.0.nominal)
stockDf$Net.change.5.nominal <- as.factor(stockDf$Net.change.5.nominal)
stockDf$Net.change.25.nominal <- as.factor(stockDf$Net.change.25.nominal)
companyDetails$SEC.filings <- as.factor(companyDetails$SEC.filings)
companyDetails$GICS.Sector <- as.factor(companyDetails$GICS.Sector)
companyDetails$GICS.Sub.Industry <- as.factor(companyDetails$GICS.Sub.Industry)
levels(stockDf$Net.change.0.nominal)
levels(stockDf$Net.change.5.nominal)
levels(stockDf$Net.change.25.nominal)
levels(stockDf$Net.change.0.nominal) <- c("Unknown", "Equal", "Negative", "Positive")
levels(stockDf$Net.change.5.nominal) <- c("Unknown", "Equal", "Negative", "Positive")
levels(stockDf$Net.change.25.nominal) <- c("Unknown", "Equal", "Negative", "Positive")
levels(companyDetails$SEC.filings)
levels(companyDetails$GICS.Sector)
levels(companyDetails$GICS.Sub.Industry)
companyDetails$Date.first.added[is.na(companyDetails$Date.first.added)] <- dmy('01-01-1970')
getCompanyDetails <- function(tickerSym) {
stock <- companyDetails[which(companyDetails$Stock==tickerSym),]
return(stock)
}
getCompanyName <- function(tickerSym) {
companyName <- companyDetails[which(companyDetails$Stock==tickerSym),]$Company
return(companyName)
}
stockData <- left_join(stockDf, companyDetails, by = c('Stock'))
# Select the columns for further analysis
stockData <- dplyr::select(stockData, c("Date", "Stock", "High", "Low", "Open", "Close",
"Volume", "Company", "GICS.Sector", "GICS.Sub.Industry",
"Net.change.0.numeric", "Net.change.0.nominal"))
# Rename the columns to intuitive names
names(stockData) <- c("Date", "StockCode", "High", "Low", "Open", "Close", "Volume", "Company",
"Sector", "SubIndustry", "NetChange", "NetChangeNominal")
full = stockData %>% filter(StockCode == "BAC") %>% dplyr::select(Date,High)
train = full[1:1257,] # 1:1000
test = full[1258:1259,] # 1001:1259
pacf(train$High,lag.max = 20)
adf.test(train$High)
library(MASS)
library(forecast)
library(tseries)
library(ggplot2)
adf.test(train$High)
pricearima = ts(train$High, start = c(2012,11,30), frequency = 365)
fitStock = auto.arima(pricearima) # auto arima selects the best order for the model
ggplot2::autoplot(pricearima,main="High Price Values for BAC")
forecastedValues = forecast(fitStock, h=2) #259
autoplot(forecastedValues)
autoplot(forecast(fitStock, h=2), include = 100)
autoplot(forecast(fitStock, h=2), include = 50)
autoplot(forecast(fitStock, h=2), include = 10)
autoplot(forecast(fitStock, h=2), include = 50) # higher level view
autoplot(forecast(fitStock, h=2), include = 10) # closer look at the time series
pacf(train$High,lag.max = 20) # test indicates data is stationary, model can be stationary/predictable to some degree
acf(train$High,lag.max = 20)
# higher level view of the time series
ggplot2::autoplot(forecast(fitStock, h=2), include = 50)
ggplot2::autoplot(pricearima,main="High Price Values for BAC")
# closer look at the time series
ggplot2::autoplot(forecast(fitStock, h=2), include = 10)
