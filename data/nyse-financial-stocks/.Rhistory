partsofday[v==4]<-"late evening"
table(partsofday)
v<-ceiling(myDF$DepTime/600)
partsofday <- rep(NA, times=dim(myDF)[1])
partsofday
partsofday[v==1]<-"early morning"
partsofday[v==2]<-"late morning"
partsofday[v==3]<-"early evening"
partsofday[v==4]<-"late evening"
table(partsofday)
myDF %>% select(DepTime) %>% `/` (600)
myDF %>% select(DepTime) %>% `/` (600) %>% ceiling
vN <- myDF %>% select(DepTime) %>% `/` (600) %>% ceiling
col
colnames(vN)
vN %>% filter(DepTime==1) %>% mutate(timeofday = "early morning")
vN %>% mutate(timeofday=ifelse(DepTime==1,"early morning"))
vN %>% mutate(timeofday=ifelse(DepTime==1,"early morning",DepTime))
partsofdayN <- vN
partsofdayN <- vN
partsofdayN <- vN %>% mutate(timeofday=ifelse(DepTime==1,"early morning",timeofday))
partsofdayN <- vN %>% mutate(timeofday=ifelse(DepTime==2,"late morning",timeofday))
partsofdayN <- vN %>% mutate(timeofday=ifelse(DepTime==3,"early evening",timeofday))
partsofdayN <- vN %>% mutate(timeofday=ifelse(DepTime==4,"late evening",timeofday))
partsofdayN <- vN %>% mutate(timeofday="empty")
partsofdayN <- partsofdayN %>% mutate(timeofday=ifelse(DepTime==1,"early morning",timeofday))
partsofdayN <- partsofdayN %>% mutate(timeofday=ifelse(DepTime==2,"late morning",timeofday))
partsofdayN <- partsofdayN %>% mutate(timeofday=ifelse(DepTime==3,"early evening",timeofday))
partsofdayN <- partsofdayN %>% mutate(timeofday=ifelse(DepTime==4,"late evening",timeofday))
table(partsofdayN)
table(partsofday)
partsofdayN
colnames(partsofdayN)
partsofdayN <- vN %>% mutate(timeofday="empty")
partsofdayN <- partsofdayN %>% mutate(timeofday=ifelse(DepTime==1,"early morning",timeofday))
partsofdayN <- partsofdayN %>% mutate(timeofday=ifelse(DepTime==2,"late morning",timeofday))
partsofdayN <- partsofdayN %>% mutate(timeofday=ifelse(DepTime==3,"early evening",timeofday))
partsofdayN <- partsofdayN %>% mutate(timeofday=ifelse(DepTime==4,"late evening",timeofday)) %>% ungroup %>% select(timeofday)
table(partsofdayN)
myDF$timeofday <- partsofday
dim(myDF)
myDF %>% mutate(timeofdayN = partsofdayN)
class(partsofdayN)
myDF %>% add_column(partsofdayN)
myDF %>% mutate(timeofdayN = partsofdayN)
myDF %>% mutate(timeofdayN = 1)
myDF %>% mutate(timeofdayN = as.vector(partsofdayN))
class(as.vector(partsofdayN))
class(as.list(partsofdayN))
myDF %>% mutate(timeofdayN = as.list(partsofdayN))
library(dplyr)
myDF %>% mutate(timeofdayN = as.list(partsofdayN))
volnames
colnames(partsofdayN)
myDF %>% mutate(timeofdayN = select(partsofdayN,timeofday))
replace <- partsofdayN %>% ungroup() %>% pull(timeofday)
myDF %>% mutate(timeofdayN = replace)
gc()
replace <- partsofdayN %>% ungroup() %>% pull(timeofday)
myDF %>% mutate(timeofdayN = replace)
library(dplyr)
myDF <- read.csv("2008.csv",header = T)
vN <- myDF %>% select(DepTime) %>% `/` (600) %>% ceiling
partsofdayN <- vN %>% mutate(timeofday="empty")
partsofdayN <- partsofdayN %>% mutate(timeofday=ifelse(DepTime==1,"early morning",timeofday))
partsofdayN <- partsofdayN %>% mutate(timeofday=ifelse(DepTime==2,"late morning",timeofday))
partsofdayN <- partsofdayN %>% mutate(timeofday=ifelse(DepTime==3,"early evening",timeofday))
partsofdayN <- partsofdayN %>% mutate(timeofday=ifelse(DepTime==4,"late evening",timeofday)) %>% ungroup %>% select(timeofday)
replace <- partsofdayN %>% ungroup() %>% pull(timeofday)
myDF %>% mutate(timeofdayN = replace)
myDF <- myDF %>% mutate(timeofdayN = replace)
# dplyr
myDF %>% select(DepTime, timeofdayN) %>% filter(row_number()<6)
# dplyr
myDF %>% select(DepTime, timeofdayN) %>% filter(row_number()<=6)
# dplyr
myDF %>% filter(Origin=="IND" & timeofdayN=="early morning") %>% n()
# dplyr
myDF %>% filter(Origin=="IND" & timeofdayN=="early morning") %>% summarise(count=n())
v<-ceiling(myDF$DepTime/600)
partsofday <- rep(NA, times=dim(myDF)[1])
partsofday
partsofday[v==1]<-"early morning"
partsofday[v==2]<-"late morning"
partsofday[v==3]<-"early evening"
partsofday[v==4]<-"late evening"
myDF$timeofday <- partsofday
# 13a) How many flights departed from IND early in the morning?
sum(myDF$Origin =="IND" & myDF$timeofday =="early morning",na.rm=T)
myDF %>% filter(Origin=="IND" & timeofdayN=="early morning") %>% summarise(count=n())
tapply(myDF$DepDelay, list(myDF$Origin,myDF$timeofday),length)[c("IND","CVG","JFK"),]
myDF %>% select(Origin %in% c("IND","CVG","JFK")) %>% group_by(Origin,timeofdayN) %>% summarise(count=n())
myDF %>% filter(Origin %in% c("IND","CVG","JFK")) %>% group_by(Origin,timeofdayN) %>% summarise(count=n())
setwd("C:\\Users\\Kavish\\Dropbox\\_Master of Data Science - UM\\WQD7004 - Programming for Data Science\\Group Assignment\\git\\rGroupProj\\data\\nyse-financial-stocks")
files <- list.files(pattern = "*.csv")
# The column names for the imported stock datasets
stockCol <- c("Date", "Stock", "Location", "High", "Low", "Open", "Close",
"Aggregated data 2 days", "Aggregated data 3 days", "Aggregated data 5 days",
"Volume", "Number of employees", "Net change 0-numeric", "Net change 0-nominal",
"Net change 5-numeric", "Net change 5-nominal", "Net change 25-numeric",
"Net change 25-nominal")
# Read the 20 source files and merge them into a single dataframe
stockDf <- do.call(rbind, lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE,
header = TRUE, col.names = stockCol)))
library(lubridate)
library(dplyr)
stockDf$Date <- dmy(stockDf$Date)
library(stringr)
stockDf$Number.of.employees <- str_replace(stockDf$Number.of.employees, pattern = ',', replacement = '')
stockDf$Number.of.employees <- as.numeric(stockDf$Number.of.employees)
stockDf$Net.change.0.nominal <- as.factor(stockDf$Net.change.0.nominal)
stockDf$Net.change.5.nominal <- as.factor(stockDf$Net.change.5.nominal)
stockDf$Net.change.25.nominal <- as.factor(stockDf$Net.change.25.nominal)
levels(stockDf$Net.change.0.nominal)
levels(stockDf$Net.change.5.nominal)
levels(stockDf$Net.change.25.nominal)
levels(stockDf$Net.change.0.nominal) <- c("Unknown", "Equal", "Negative", "Positive")
levels(stockDf$Net.change.5.nominal) <- c("Unknown", "Equal", "Negative", "Positive")
levels(stockDf$Net.change.25.nominal) <- c("Unknown", "Equal", "Negative", "Positive")
stockDf$Net.change.25.numeric[is.na(stockDf$Net.change.25.numeric)] <- mean(stockDf$Net.change.25.numeric,
na.rm=T)
sum(is.na(stockDf$Net.change.5.numeric))
stockDf$Net.change.5.numeric[is.na(stockDf$Net.change.5.numeric)] <- mean(stockDf$Net.change.5.numeric,
na.rm=T)
# The column names for the imported company dataset
companyCol <- c('Stock', 'Company', 'SEC filings', 'GICS Sector', 'GICS Sub Industry', 'HQ Address',
'Date first added', 'CIK')
companyDetails <- read.csv('../securities.csv', stringsAsFactors = FALSE, col.names = companyCol)
companyDetails$SEC.filings <- as.factor(companyDetails$SEC.filings)
companyDetails$GICS.Sector <- as.factor(companyDetails$GICS.Sector)
companyDetails$GICS.Sub.Industry <- as.factor(companyDetails$GICS.Sub.Industry)
levels(stockDf$Net.change.0.nominal) <- c("Unknown", "Equal", "Negative", "Positive")
levels(stockDf$Net.change.5.nominal) <- c("Unknown", "Equal", "Negative", "Positive")
levels(stockDf$Net.change.25.nominal) <- c("Unknown", "Equal", "Negative", "Positive")
# Replace the NAs in the date column with a date
companyDetails$Date.first.added[is.na(companyDetails$Date.first.added)] <- dmy('01-01-1970')
# Removed all the NAs in the company data frame
sum(is.na(companyDetails))
# Merge the 2 dataset with left join with the similar column Stock
stockData <- left_join(stockDf, companyDetails, by = c('Stock'))
colnames(stockData)
stockData <- select(stockData, c("Date", "Stock", "High", "Low", "Open", "Close",
"Volume", "Company", "GICS.Sector", "GICS.Sub.Industry",
"Net.change.0.numeric", "Net.change.0.nominal"))
names(stockData) <- c("Date", "StockCode", "High", "Low", "Open", "Close", "Volume", "Company",
"Sector", "SubIndustry", "NetChange", "NetChangeNominal")
stockData <- stockData %>% mutate(HighLowDiff = High - Low)
getYear <- function(year) {
vec <- c()
if (year == '2013') {
vec <- c('2013', '01-01-2013', '31-12-2013')
} else if (year == '2014') {
vec <- c('2014', '01-01-2014', '31-12-2014')
} else if (year == '2015') {
vec <- c('2015', '01-01-2015', '31-12-2015')
} else if (year == '2016') {
vec <- c('2016', '01-01-2016', '31-12-2016')
} else if (year == '2017') {
vec <- c('2017', '01-01-2017', '31-12-2017')
} else {
vec <- c()
}
return (vec)
}
# Closing price of a certain stock
plotClosePrice <- function(code, year='2017') {
yearVec <- getYear(year)
subStock <- stockData %>% filter(StockCode==code, Date >= dmy(yearVec[2]) & Date <= dmy(yearVec[3]))
ggplot(data = subStock, aes(x=Date, y=Close)) +
geom_line(color='Blue') +
ggtitle(paste('Closing Price for', getCompanyName(code))) +
xlab(yearVec[1]) +
ylab('Closing Price, $')
}
plotClosePrice(code="BAC", year='2016')
############# Exploratory Data Analysis #################
library(ggplot2)
library(gridExtra)
plotClosePrice(code="BAC", year='2016')
getCompanyDetails <- function(tickerSym) {
stock <- companyDetails[which(companyDetails$Stock==tickerSym),]
return(stock)
}
getCompanyName <- function(tickerSym) {
companyName <- companyDetails[which(companyDetails$Stock==tickerSym),]$Company
return(companyName)
}
plotClosePrice(code="BAC", year='2016')
BACStock <- stockData %>% filter(StockCode == 'BAC')
cor(BACStock$Volume, BACStock$Close)
cor(BACStock$Volume, BACStock$High)
ggplot(BACStock, aes(x=High, y=Volume)) +
geom_line(color='blue')
cor(BACStock$High, BACStock$Close)
cor(BACStock$Close, BACStock$Low)
cor(BACStock$High, BACStock$Low)
cor(BACStock$High, BACStock$Open)
cor(BACStock$Open, BACStock$Close)
cor(BACStock$Open, BACStock$High + BACStock$Low)
ggplot(BACStock, aes(x=Open, y=High)) +
geom_point(color='blue') +
geom_abline(color='red', size=1)
library(arima)
View(BACStock)
View(BACStock)
cor(BACStock$Volume, BACStock$High)
ggplot(BACStock, aes(x=High, y=Volume)) +
geom_line(color='blue')
ggplot(BACStock, aes(x=Date, y=NetChange)) +
geom_line(color='blue')
ggplot(BACStock, aes(x=Date, y=open)) +
geom_line(color='blue')
ggplot(BACStock, aes(x=Date, y=Open)) +
geom_line(color='blue')
beer2 <- window(ausbeer, start=1992)
data(beer2)
install.packages("MASS")
install.packages("tseries")
install.packages("forecast")
library(MASS)
library(tseries)
library(forecast)
CstockTrain <- stockData %>% filter(StockCode == 'C', Date < dmy('01-01-2017')) %>%
select(StockCode, High, Low, Open, Close)
CstockTrain <- stockData %>% filter(StockCode == 'C', Date < dmy('01-01-2017')) %>%
select(StockCode, High, Low, Open, Close)
View(stockData)
View(stockData)
stockData %>% filter(StockCode == 'C', Date < dmy('01-01-2017'))
stockData %>% filter(StockCode == "BAC") %>% select(Date,High)
library(dplyr)
stockData %>% filter(StockCode == "BAC") %>% select(Date,High)
stockData %>% filter(StockCode == "BAC") %>% dplyr::select(Date,High)
full = stockData %>% filter(StockCode == "BAC") %>% dplyr::select(Date,High)
dim(full)
full[1:1000]
full[1:1000,]
price
View(full)
full$High = log(full$High)
train = full[1:1000,]
acf(train,lag.max = 20)
acf(train$High,lag.max = 20)
pacf(train$High,lag.max = 20)
acf(train$High,lag.max = 20)
pacf(train$High,lag.max = 20)
diff(train$High,1)
diffstock = diff(train$High,1)
adf.test(train$High)
adf.test(diffstock)
View(train)
View(train)
pricearima = ts(train$High, start = c(2012,11,30), frequency = 365)
fitStock = auto.arima(pricearima)
firStock
fitStock
plot(pricearima, type = 'l')
plot(pricearima, type = 'l')
title("BAC High Price")
exp(train$High)
forecastedValues = forecast(fitStock, h=26)
forecastedValues
plot(forecastedValues)
forecastedValues = forecast(fitStock, h=200)
plot(forecastedValues)
forecastedValues = forecast(fitStock, h=60)
plot(forecastedValues)
full = stockData %>% filter(StockCode == "BAC") %>% dplyr::select(Date,High)
train = full[1:1000,]
pricearima = ts(train$High, start = c(2012,11,30), frequency = 365)
fitStock = auto.arima(pricearima)
plot(pricearima, type = 'l')
title("BAC High Price")
forecastedValues = forecast(fitStock, h=60)
plot(forecastedValues)
dim(full)
test = full[1001:1259,]
compare = data.frame(test$High,forecastedValues)
columns = c("Actual Price","Forecasted Price")
forecastedValues = forecast(fitStock, h=259)
forecastedValues
compare = data.frame(test$High,forecastedValues)
columns = c("Actual Price","Forecasted Price")
names(comapre) = columns
names(compare) = columns
compare
forecastedValues
compare = data.frame(test$High,forecastedValues)
columns = c("Actual Price","Forecasted Price")
names(compare) = columns
compare = data.frame(test$High,forecastedValues)
columns = c("ActualPrice","ForecastedPrice")
names(compare) = columns
compare$ActualPrice
percentage_error = ((compare$ActualPrice - compare$ForecastedPrice)/ActualPrice)
percentage_error
mean(percentage_error)
percentage_error = ((compare$ActualPrice - compare$ForecastedPrice)/compare$ActualPrice)
percentage_error
mean(percentage_error)
View(compare)
View(compare)
finalForecastedValues = as.numeric(forecastedValues$mean)
compare = data.frame(test$High,finalForecastedValues)
columns = c("ActualPrice","ForecastedPrice")
names(compare) = columns
percentage_error = ((compare$ActualPrice - compare$ForecastedPrice)/compare$ActualPrice)
percentage_error
mean(percentage_error)
pricearima = ts(train$High, start = c(2012,11,30), frequency = 365)
fitStock = auto.arima(pricearima)
fitStock
pricearima = ts(train$High, start = c(2012,11,30), frequency = 365)
fitStock = arima(pricearima, order = c(1,0,0))
plot(pricearima, type = 'l')
title("BAC High Price")
forecastedValues = forecast(fitStock, h=259)
forecastedValues
plot(forecastedValues)
finalForecastedValues = as.numeric(forecastedValues$mean)
compare = data.frame(test$High,finalForecastedValues)
columns = c("ActualPrice","ForecastedPrice")
names(compare) = columns
percentage_error = ((compare$ActualPrice - compare$ForecastedPrice)/compare$ActualPrice)
percentage_error
mean(percentage_error)
pricearima = ts(train$High, start = c(2012,11,30), frequency = 365)
fitStock = arima(pricearima, order = c(1,1,0))
fitStock
plot(pricearima, type = 'l')
title("BAC High Price")
forecastedValues = forecast(fitStock, h=259)
forecastedValues
plot(forecastedValues)
finalForecastedValues = as.numeric(forecastedValues$mean)
compare = data.frame(test$High,finalForecastedValues)
pricearima = ts(train$High, start = c(2012,11,30), frequency = 365)
fitStock = arima(pricearima, order = c(1,1,1))
forecastedValues = forecast(fitStock, h=259)
plot(forecastedValues)
compare = data.frame(test$High,finalForecastedValues)
columns = c("ActualPrice","ForecastedPrice")
names(compare) = columns
percentage_error = ((compare$ActualPrice - compare$ForecastedPrice)/compare$ActualPrice)
percentage_error
mean(percentage_error)
full = stockData %>% filter(StockCode == "BAC") %>% dplyr::select(Date,High)
train = full[1:1257,] # 1:1000
test = full[1257:1259,]
pricearima = ts(train$High, start = c(2012,11,30), frequency = 365)
fitStock = auto.arima(pricearima)
forecastedValues = forecast(fitStock, h=2) #259
forecastedValues
plot(forecastedValues)
finalForecastedValues = as.numeric(forecastedValues$mean)
compare = data.frame(test$High,finalForecastedValues)
columns = c("ActualPrice","ForecastedPrice")
names(compare) = columns
test = full[1258:1259,] # 1001:1259
compare = data.frame(test$High,finalForecastedValues)
columns = c("ActualPrice","ForecastedPrice")
names(compare) = columns
percentage_error = ((compare$ActualPrice - compare$ForecastedPrice)/compare$ActualPrice)
percentage_error
mean(percentage_error)
stockCol <- c("Date", "Stock", "Location", "High", "Low", "Open", "Close",
"Aggregated data 2 days", "Aggregated data 3 days", "Aggregated data 5 days",
"Volume", "Number of employees", "Net change 0-numeric", "Net change 0-nominal",
"Net change 5-numeric", "Net change 5-nominal", "Net change 25-numeric",
"Net change 25-nominal")
stockDf <- do.call(rbind, lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE,
header = TRUE, col.names = stockCol)))
stockDf$Date <- dmy(stockDf$Date)
# Fix the date format in the dataset
library(lubridate)
library(dplyr)
stockDf$Date <- dmy(stockDf$Date)
companyDetails$Date.first.added <- dmy(companyDetails$Date.first.added)
# Fix the number incorrectly represented as characters
library(stringr)
stockDf$Number.of.employees <- str_replace(stockDf$Number.of.employees, pattern = ',', replacement = '')
stockDf$Number.of.employees <- as.numeric(stockDf$Number.of.employees)
# Fix the string that should be formatted as factors
stockDf$Net.change.0.nominal <- as.factor(stockDf$Net.change.0.nominal)
stockDf$Net.change.5.nominal <- as.factor(stockDf$Net.change.5.nominal)
stockDf$Net.change.25.nominal <- as.factor(stockDf$Net.change.25.nominal)
companyDetails$SEC.filings <- as.factor(companyDetails$SEC.filings)
companyDetails$GICS.Sector <- as.factor(companyDetails$GICS.Sector)
companyDetails$GICS.Sub.Industry <- as.factor(companyDetails$GICS.Sub.Industry)
levels(stockDf$Net.change.0.nominal)
levels(stockDf$Net.change.5.nominal)
levels(stockDf$Net.change.25.nominal)
levels(stockDf$Net.change.0.nominal) <- c("Unknown", "Equal", "Negative", "Positive")
levels(stockDf$Net.change.5.nominal) <- c("Unknown", "Equal", "Negative", "Positive")
levels(stockDf$Net.change.25.nominal) <- c("Unknown", "Equal", "Negative", "Positive")
levels(companyDetails$SEC.filings)
levels(companyDetails$GICS.Sector)
levels(companyDetails$GICS.Sub.Industry)
companyDetails$Date.first.added[is.na(companyDetails$Date.first.added)] <- dmy('01-01-1970')
# Function  to get company details with the stock code
getCompanyDetails <- function(tickerSym) {
stock <- companyDetails[which(companyDetails$Stock==tickerSym),]
return(stock)
}
getCompanyName <- function(tickerSym) {
companyName <- companyDetails[which(companyDetails$Stock==tickerSym),]$Company
return(companyName)
}
# Merge the 2 dataset with left join with the similar column Stock
stockData <- left_join(stockDf, companyDetails, by = c('Stock'))
# Select the columns for further analysis
stockData <- select(stockData, c("Date", "Stock", "High", "Low", "Open", "Close",
"Volume", "Company", "GICS.Sector", "GICS.Sub.Industry",
"Net.change.0.numeric", "Net.change.0.nominal"))
# Rename the columns to intuitive names
names(stockData) <- c("Date", "StockCode", "High", "Low", "Open", "Close", "Volume", "Company",
"Sector", "SubIndustry", "NetChange", "NetChangeNominal")
files <- list.files(pattern = "*.csv")
stockCol <- c("Date", "Stock", "Location", "High", "Low", "Open", "Close",
"Aggregated data 2 days", "Aggregated data 3 days", "Aggregated data 5 days",
"Volume", "Number of employees", "Net change 0-numeric", "Net change 0-nominal",
"Net change 5-numeric", "Net change 5-nominal", "Net change 25-numeric",
"Net change 25-nominal")
stockDf <- do.call(rbind, lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE,
header = TRUE, col.names = stockCol)))
stockDf$Date <- dmy(stockDf$Date)
stockDf$Date <- dmy(stockDf$Date)
stockDf$Number.of.employees <- str_replace(stockDf$Number.of.employees, pattern = ',', replacement = '')
View(stockDf)
View(stockDf)
# Fix the date format in the dataset
library(lubridate)
library(dplyr)
files <- list.files(pattern = "*.csv")
stockCol <- c("Date", "Stock", "Location", "High", "Low", "Open", "Close",
"Aggregated data 2 days", "Aggregated data 3 days", "Aggregated data 5 days",
"Volume", "Number of employees", "Net change 0-numeric", "Net change 0-nominal",
"Net change 5-numeric", "Net change 5-nominal", "Net change 25-numeric",
"Net change 25-nominal")
stockDf <- do.call(rbind, lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE,
header = TRUE, col.names = stockCol)))
View(stockDf)
stockDf$Date <- dmy(stockDf$Date)
stockDf$Number.of.employees <- str_replace(stockDf$Number.of.employees, pattern = ',', replacement = '')
stockDf$Number.of.employees <- as.numeric(stockDf$Number.of.employees)
stockDf$Net.change.0.nominal <- as.factor(stockDf$Net.change.0.nominal)
stockDf$Net.change.5.nominal <- as.factor(stockDf$Net.change.5.nominal)
stockDf$Net.change.25.nominal <- as.factor(stockDf$Net.change.25.nominal)
companyDetails$SEC.filings <- as.factor(companyDetails$SEC.filings)
companyDetails$GICS.Sector <- as.factor(companyDetails$GICS.Sector)
companyDetails$GICS.Sub.Industry <- as.factor(companyDetails$GICS.Sub.Industry)
# The column names for the imported company dataset
companyCol <- c('Stock', 'Company', 'SEC filings', 'GICS Sector', 'GICS Sub Industry', 'HQ Address',
'Date first added', 'CIK')
companyDetails <- read.csv('../securities.csv', stringsAsFactors = FALSE, col.names = companyCol)
companyDetails$SEC.filings <- as.factor(companyDetails$SEC.filings)
companyDetails$GICS.Sector <- as.factor(companyDetails$GICS.Sector)
companyDetails$GICS.Sub.Industry <- as.factor(companyDetails$GICS.Sub.Industry)
levels(stockDf$Net.change.0.nominal)
levels(stockDf$Net.change.5.nominal)
levels(stockDf$Net.change.25.nominal)
levels(stockDf$Net.change.0.nominal) <- c("Unknown", "Equal", "Negative", "Positive")
levels(stockDf$Net.change.5.nominal) <- c("Unknown", "Equal", "Negative", "Positive")
levels(stockDf$Net.change.25.nominal) <- c("Unknown", "Equal", "Negative", "Positive")
levels(companyDetails$SEC.filings)
levels(companyDetails$GICS.Sector)
levels(companyDetails$GICS.Sub.Industry)
companyDetails$Date.first.added[is.na(companyDetails$Date.first.added)] <- dmy('01-01-1970')
# Function  to get company details with the stock code
getCompanyDetails <- function(tickerSym) {
stock <- companyDetails[which(companyDetails$Stock==tickerSym),]
return(stock)
}
getCompanyName <- function(tickerSym) {
companyName <- companyDetails[which(companyDetails$Stock==tickerSym),]$Company
return(companyName)
}
# Merge the 2 dataset with left join with the similar column Stock
stockData <- left_join(stockDf, companyDetails, by = c('Stock'))
# Select the columns for further analysis
stockData <- select(stockData, c("Date", "Stock", "High", "Low", "Open", "Close",
"Volume", "Company", "GICS.Sector", "GICS.Sub.Industry",
"Net.change.0.numeric", "Net.change.0.nominal"))
stockData <- dplyr::select(stockData, c("Date", "Stock", "High", "Low", "Open", "Close",
"Volume", "Company", "GICS.Sector", "GICS.Sub.Industry",
"Net.change.0.numeric", "Net.change.0.nominal"))
names(stockData) <- c("Date", "StockCode", "High", "Low", "Open", "Close", "Volume", "Company",
"Sector", "SubIndustry", "NetChange", "NetChangeNominal")
full = stockData %>% filter(StockCode == "BAC") %>% dplyr::select(Date,High)
train = full[1:1257,] # 1:1000
test = full[1258:1259,] # 1001:1259
acf(train$High,lag.max = 20)
pacf(train$High,lag.max = 20) # test indicates data is stationary, model can be stationary/predictable to some degree
diffstock = diff(train$High,1)
adf.test(train$High)
pricearima = ts(train$High, start = c(2012,11,30), frequency = 365)
fitStock = auto.arima(pricearima)
# fitStock = arima(pricearima, order = c(1,1,1))
fitStock
plot(pricearima, type = 'l')
title("BAC High Price")
forecastedValues = forecast(fitStock, h=2) #259
forecastedValues
plot(forecastedValues)
compare = data.frame(test$High,finalForecastedValues)
finalForecastedValues = as.numeric(forecastedValues$mean)
compare = data.frame(test$High,finalForecastedValues)
columns = c("ActualPrice","ForecastedPrice")
names(compare) = columns
percentage_error = ((compare$ActualPrice - compare$ForecastedPrice)/compare$ActualPrice)
percentage_error
mean(percentage_error)
